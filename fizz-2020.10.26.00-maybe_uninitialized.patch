From 66de2b986f81ee8fc9a8a06661ee78d9f4088094 Mon Sep 17 00:00:00 2001
From: Michel Salim <michel@fb.com>
Date: Mon, 26 Oct 2020 16:30:30 -0700
Subject: [PATCH] fix GCC -Wmaybe-uninitialized false positives

Summary:
Variables initialized as part of a `std::tie` are incorrectly identified
by GCC as being uninitialized. This breaks builds on Fedora; applying this
allows build to continue.

Reviewed By: danobi

Differential Revision: D24495553

fbshipit-source-id: 68f95e3a4f893db070f70191f2bc9e45793a16d0
---
 fizz/client/ClientProtocol.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/fizz/client/ClientProtocol.cpp b/fizz/client/ClientProtocol.cpp
index ccd094e3..0256d9bc 100644
--- a/fizz/client/ClientProtocol.cpp
+++ b/fizz/client/ClientProtocol.cpp
@@ -946,12 +946,16 @@ EventHandler<ClientTypes, StateEnum::ExpectingServerHello, Event::ServerHello>::
 
   ProtocolVersion version;
   CipherSuite cipher;
+  // GCC up to 10.2.1 does not realize exchange is actually being initialized below
+  FOLLY_PUSH_WARNING
+  FOLLY_GCC_DISABLE_WARNING("-Wmaybe-uninitialized")
   Optional<std::tuple<NamedGroup, Buf, const KeyExchange*>> exchange;
   std::tie(version, cipher, exchange) = negotiateParameters(
       shlo,
       state.context()->getSupportedVersions(),
       state.context()->getSupportedCiphers(),
       *state.keyExchangers());
+  FOLLY_POP_WARNING
 
   if (!folly::IOBufEqualTo()(
           state.legacySessionId(), shlo.legacy_session_id_echo)) {
@@ -1001,10 +1005,14 @@ EventHandler<ClientTypes, StateEnum::ExpectingServerHello, Event::ServerHello>::
       keyExchangeType = KeyExchangeType::OneRtt;
     }
 
+    // GCC up to 10.2.1 does not realize serverShare is actually being initialized below
+    FOLLY_PUSH_WARNING
+    FOLLY_GCC_DISABLE_WARNING("-Wmaybe-uninitialized")
     Buf serverShare;
     const KeyExchange* kex;
     std::tie(group, serverShare, kex) = std::move(*exchange);
     auto sharedSecret = kex->generateSharedSecret(serverShare->coalesce());
+    FOLLY_POP_WARNING
     scheduler->deriveHandshakeSecret(sharedSecret->coalesce());
   } else {
     keyExchangeType = KeyExchangeType::None;
